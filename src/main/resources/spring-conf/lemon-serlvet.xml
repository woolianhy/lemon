<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd   
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd   
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-3.1.xsd   
        http://www.springframework.org/schema/mvc   
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd   
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd">
	<!--<mvc:annotation-driven> <mvc:message-converters> <bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>text/plain;charset=UTF-8</value> 
		</list> </property> </bean> <bean id="mappingJacksonHttpMessageConverter" 
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>applicaton/json;charset=UTF-8</value> 
		</list> </property> </bean> </mvc:message-converters> </mvc:annotation-driven> -->

	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<bean
				class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json; charset=UTF-8</value>
						<value>application/x-www-form-urlencoded; charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<context:component-scan base-package="com.lemon" />

	<!-- 引入配置文件 -->
	<util:properties id="lemonCommon"
		location="classpath:/properties/wx.properties" />

	<bean id="gson" class="com.google.gson.Gson"></bean>

	<!-- 公众号配置，可以配置多个 -->
	<bean id="customerWxConfig" class="com.lemon.base.config.WxConfigImpl">
		<property name="appId" value="#{lemonCommon.customerAppID}"></property>
		<property name="appsecret" value="#{lemonCommon.customerAppsecret}"></property>
		<property name="mch_id" value="#{lemonCommon.customerMch_id}"></property>
		<property name="wxzf_key" value="#{lemonCommon.customerWxzf_key}"></property>
		<property name="notify_url" value="#{lemonCommon.customerNotify_url}"></property>
		<property name="token" value="#{lemonCommon.customerToken}"></property>
		<property name="subsribeReplyText" value="#{lemonCommon.customerSubsribeReplyText}"></property>
		<property name="tokenProxy" ref="customerTokenProxy"></property>
	</bean>

	<!-- 公众号token中控器，需要注入微信配置 -->
	<bean id="customerTokenThreadRunnable" class="com.lemon.base.thread.TokenThreadRunnable">
		<property name="wxConfig" ref="customerWxConfig"></property>
	</bean>

	<!-- 公众号token代理，可以使用代理获取token -->
	<bean id="customerTokenProxy" class="com.lemon.base.util.TokenProxyImpl">
		<constructor-arg name="tokenThreadRunnable" ref="customerTokenThreadRunnable"></constructor-arg>
	</bean>



	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<mvc:interceptors>
		<!-- 跨域处理拦截 -->
		<bean class="com.lemon.base.interceptor.AccessControlAllowOriginInterceptor" />
		<!-- 定义拦截类路径为/html/oauth2/**的请求，进行oauth认证获取微信用户信息 -->
		<mvc:interceptor>
			<mvc:mapping path="/html/oauth2/**" />
			<bean class="com.lemon.customer.interceptor.CustomerOAuth2Interceptor" />
		</mvc:interceptor>

	</mvc:interceptors>

	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/html/**" location="/html/" />
	<mvc:resources mapping="/json/**" location="/json/" />
	<mvc:resources mapping="/fonts/**" location="/fonts/" />
	<mvc:resources mapping="/files/**" location="/files/" />
	<mvc:resources mapping="/ckeditor/**" location="/ckeditor/" />
</beans>